quant_NLL1_theo_mean <- apply(quant_NLL1_theo, 2, function(x) tapply(x, idx, mean))[, -c(1, 11)]
quant_NLL2_theo <- Quantile_prob(data.frame(mod_list[[6]]),
n_items = n_items,
n_person = n_person,
quantiles = quantiles,
method = "theoretical",
irf_function = "2NLL")
quant_NLL2_theo_mean <- apply(quant_NLL2_theo, 2, function(x) tapply(x, idx, mean))[, -c(1, 11)]
mod_list_full_emp <- list(quant_1pl_emp,
quant_2pl_emp,
quant_CLL1_emp,
quant_CLL2_emp,
quant_NLL1_emp,
quant_NLL2_emp)
# create lists for sampling for theoretical method
mod_list_full_theo <- list(quant_1pl_theo,
quant_2pl_theo,
quant_CLL1_theo,
quant_CLL2_theo,
quant_NLL1_theo,
quant_NLL2_theo)
set.seed(329053239)
prob_averaged_mod_stack_emp <- Quantile_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = weights_full_stack)
n_draws <- 6000
prob_averaged_mod_stack_emp <- Quantile_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = weights_full_stack)
prob_averaged_mod_stack_emp_mean <- t(sapply(prob_averaged_mod_stack_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_averaged_mod_bma_emp <- Quantile_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = weights_full_bma)
prob_averaged_mod_bma_emp_mean <- t(sapply(prob_averaged_mod_bma_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
### Theoretical
prob_averaged_mod_stack_theo <- Quantile_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = weights_full_stack)
prob_averaged_mod_stack_theo_mean <- t(sapply(prob_averaged_mod_stack_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_averaged_mod_bma_theo <- Quantile_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = weights_full_bma)
prob_averaged_mod_bma_theo_mean <- t(sapply(prob_averaged_mod_bma_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
## Item averaging
### empirical
prob_averaged_item_stack_emp <- Quantile_item_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = stack_matrix)
prob_averaged_item_stack_emp_mean <- t(sapply(prob_averaged_item_stack_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_averaged_item_bma_emp <- Quantile_item_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = bma_matrix)
prob_averaged_item_bma_emp_mean <- t(sapply(prob_averaged_item_bma_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
### Theoretical
prob_averaged_item_stack_theo <- Quantile_item_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = stack_matrix)
prob_averaged_item_stack_theo_mean <- t(sapply(prob_averaged_item_stack_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_averaged_item_bma_theo <- Quantile_item_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = bma_matrix)
prob_averaged_item_bma_theo_mean <- t(sapply(prob_averaged_item_bma_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_selection_stack_emp <- Quantile_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = ifelse(weights_full_stack < weights_full_stack[which(weights_full_stack == max(weights_full_stack))], 0, 1))
prob_selection_stack_emp_mean <- t(sapply(prob_selection_stack_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_selection_bma_emp <- Quantile_sample(mod_list_full_emp,
n_items = n_items,
n_draws = n_draws,
weights = ifelse(weights_full_bma < weights_full_bma[which(weights_full_bma == max(weights_full_bma))], 0, 1))
prob_selection_bma_emp_mean <- t(sapply(prob_selection_bma_emp, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_selection_stack_theo <- Quantile_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = ifelse(weights_full_stack < weights_full_stack[which(weights_full_stack == max(weights_full_stack))], 0, 1))
prob_selection_stack_theo_mean <- t(sapply(prob_selection_stack_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
prob_selection_bma_theo <- Quantile_sample(mod_list_full_theo,
n_items = n_items,
n_draws = n_draws,
weights = ifelse(weights_full_bma < weights_full_bma[which(weights_full_bma == max(weights_full_bma))], 0, 1))
prob_selection_bma_theo_mean <- t(sapply(prob_selection_bma_theo, colMeans, na.rm = TRUE))[, -c(1, 11)]
cols <- c("#999999", #1
"#E69F00", #2
"#56B4E9", #3
"#009E73", #4
"#F0E442", #5
"#0072B2", #6
"#D55E00", #7
"#CC79A7", #8
"#271DEB", #9
"black")   #10
bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") + theme_minimal() +
theme(legend.position="bottom")
source("C:/Users/fabio/Dropbox/Work/Useful R scripts/GGplot_defaults.R")
bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") + +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line=element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
png(filename = "Real Data Weights.png", width = 7, height = 7,
units = "in", res = 300)
bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line=element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
dev.off()
plot_emp_weights <- bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line=element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
print(plot_emp_weights)
ggsave(filename = "plot_emp_weights",
plot =  plot_emp_weights,
bg = "transparent",
width = 8,
height = 7,
dpi = 300)
setwd("C:/Users/fabio/Dropbox/Work/Papers/Model averaging/IMPS_2024/images/empirical_example")
plot_emp_weights <- bma_matrix %>% mutate(item = 1:n(), type = "BMA+ Weights", across(`1PL`:`2NLL`, as.numeric)) %>%
bind_rows(stack_matrix %>% as.data.frame %>% mutate(item = 1:n(), type = "Stacking Weights",
across(`1PL`:`2NLL`, as.numeric),
score = -1 * `1CLL` - .999 * `2CLL` + .01 * `1NLL` + .0099 * `2NLL`)) %>%
pivot_longer(-c(item, type, score), names_to = "model", values_to = "weight") %>%
group_by(item, model) %>% mutate(score = max(score, na.rm = TRUE)) %>% ungroup %>%
mutate(model = factor(model, levels = c("1CLL", "2CLL", "1PL", "2PL", "1NLL", "2NLL")),
weight = as.numeric(weight),
item = fct_reorder(factor(item), score),
model) %>%
ggplot(aes(item, weight, fill = model)) + geom_col() + coord_flip() +
scale_fill_manual(values = cols[c(2, 7, 1, 10, 3, 9)]) + facet_wrap(~type) +
labs(x = "item number", fill = "") +
theme(text = element_text(colour = "black"),
legend.position="bottom",
legend.title.position = "top",
legend.title = element_text(hjust = 0.5),
strip.text = element_text(face = "bold"),
strip.background = element_blank(),
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line=element_blank(),
legend.background = element_rect(fill='transparent'),
axis.text = element_text(family = "Times New Roman",
colour = "black")) +
guides(fill = guide_legend(nrow = 1,
byrow = TRUE,
reverse = TRUE))
print(plot_emp_weights)
ggsave(filename = "plot_emp_weights",
plot =  plot_emp_weights,
bg = "transparent",
width = 8,
height = 7,
dpi = 300)
ggsave(filename = "plot_emp_weights.png",
plot =  plot_emp_weights,
bg = "transparent",
width = 8,
height = 7,
dpi = 300)
# items 4, 5 have some pretty big differences
i <- 12 # pick an item
plot(1:9, prob_averaged_mod_stack_emp_mean[i, ] - ks_probs[i, ], type = 'l', ylim = c(-.5, .5))
lines(1:9, prob_averaged_mod_stack_theo_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_averaged_item_stack_emp_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_averaged_item_stack_theo_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_selection_stack_emp_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_selection_stack_theo_mean[i, ] - ks_probs[i, ], type = 'l')
abline(h = 0, lty = 3)
plot(1:9, prob_averaged_mod_bma_emp_mean[i, ] - ks_probs[i, ], type = 'l', ylim = c(-.2, .2))
lines(1:9, prob_averaged_mod_bma_theo_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_averaged_item_bma_emp_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_averaged_item_bma_theo_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_selection_bma_emp_mean[i, ] - ks_probs[i, ], type = 'l')
lines(1:9, prob_selection_bma_theo_mean[i, ] - ks_probs[i, ], type = 'l')
abline(h = 0, lty = 3)
plot(1:9, prob_averaged_mod_stack_emp_mean[i, ], ylim = c(0, 1), type = 'l')
lines(1:9, prob_averaged_item_stack_emp_mean[i, ], col = 2)
lines(1:9, prob_selection_stack_emp_mean[i, ], col = 3)
plot(1:9, prob_averaged_mod_bma_emp_mean[i, ], ylim = c(0, 1), type = 'l')
lines(1:9, prob_averaged_item_bma_emp_mean[i, ], col = 2)
lines(1:9, prob_selection_bma_emp_mean[i, ], col = 3)
plot(1:9, prob_averaged_mod_stack_theo_mean[i, ], ylim = c(0, 1), type = 'l')
lines(1:9, prob_averaged_item_stack_theo_mean[i, ], col = 2)
lines(1:9, prob_selection_stack_theo_mean[i, ], col = 3)
plot(1:9, prob_averaged_mod_bma_theo_mean[i, ], ylim = c(0, 1), type = 'l')
lines(1:9, prob_averaged_item_bma_theo_mean[i, ], col = 2)
lines(1:9, prob_selection_bma_theo_mean[i, ], col = 3)
# another option is to compare the expected response functions
plot(1:9, colSums(prob_averaged_mod_stack_emp_mean), ylim = c(0, 35), type = "l", pch = 16)
lines(1:9, colSums(prob_averaged_mod_stack_theo_mean), pch = 16)
lines(1:9, colSums(prob_averaged_item_stack_emp_mean), pch = 16)
lines(1:9, colSums(prob_averaged_item_stack_theo_mean), pch = 16)
lines(1:9, colSums(prob_selection_stack_emp_mean), pch = 16)
lines(1:9, colSums(prob_selection_stack_theo_mean), pch = 16)
# what's the story? maybe look at 3 prototype items with 3 different weight patterns
# look at the different IRFs and what averaging, selection, and item-level section does
# items 5, 14, maybe 21, 24
i <- 35
plot(1:9, quant_1pl_emp_mean[i, ], type = 'l', ylim = c(0, 1))
lines(1:9, quant_2pl_emp_mean[i, ], type = 'l', lty = 2)
lines(1:9, quant_CLL1_emp_mean[i, ], type = 'l', col = 2)
lines(1:9, quant_CLL2_emp_mean[i, ], type = 'l', col = 2, lty = 2)
lines(1:9, quant_NLL1_emp_mean[i, ], type = 'l', col = 4)
lines(1:9, quant_NLL2_emp_mean[i, ], type = 'l', col = 4, lty = 2)
i <- 5
plot(qnorm(seq(.1, .9, by = .1)), quant_1pl_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l',
ylim = c(-.1, .1))
lines(qnorm(seq(.1, .9, by = .1)), quant_2pl_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l', lty = 2)
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL1_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l', col = 2)
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL2_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l', col = 2, lty = 2)
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL1_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l', col = 4)
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL2_theo_mean[i, ] - prob_averaged_mod_bma_theo_mean[i, ], type = 'l', col = 4, lty = 2)
abline(h = 0, lty = 3)
# for item 14, stacking weights are equivalent to MS on 1NLL
# model selection with BMA+ weights chooses the CLL
# cols <- RColorBrewer::brewer.pal(5, "Dark2")
cols <- c("#999999", #1
"#E69F00", #2
"#56B4E9", #3
"#009E73", #4
"#F0E442", #5
"#0072B2", #6
"#D55E00", #7
"#CC79A7", #8
"#271DEB", #9
"black")   #10
i <- 14
par(mfrow = c(1, 2))
plot(qnorm(seq(.1, .9, by = .1)), quant_1pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Individual Model Predictions", bty = 'l', lwd = 2, col = cols[1])
lines(qnorm(seq(.1, .9, by = .1)), quant_2pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[2])
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[3])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[4])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL2_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[6])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("1PL", "2PL", "CLL", "NLL", "2NLL"),
col = cols[c(1, 2, 3, 4, 6)], lty = 1, bty = "n", lwd = 2)
plot(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Averaged Predictions", bty = 'l', lwd = 2, col = cols[7])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[8])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[9])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[10])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("Item-Level Average, BMA+", "Item-Level Average, Stacking",
"Test-Level Average, BMA+", "Test-Level Average, Stacking"),
bty = "n", lty = 1, col = cols[c(7, 8, 9, 10)], lwd = 2)
par(mfrow = c(1, 1))
png(filename = "Real Data Predictions.png", width = 9, height = 6,
units = "in", res = 300)
i <- 14
par(mfrow = c(1, 2))
plot(qnorm(seq(.1, .9, by = .1)), quant_1pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Individual Model Predictions", bty = 'l', lwd = 2, col = cols[1])
lines(qnorm(seq(.1, .9, by = .1)), quant_2pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[2])
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[3])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[4])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL2_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[6])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("1PL", "2PL", "CLL", "NLL", "2NLL"),
col = cols[c(1, 2, 3, 4, 6)], lty = 1, bty = "n", lwd = 2)
plot(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Averaged Predictions", bty = 'l', lwd = 2, col = cols[7])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[8])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[9])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[10])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("Item-Level Average, BMA+", "Item-Level Average, Stacking",
"Test-Level Average, BMA+", "Test-Level Average, Stacking"),
bty = "n", lty = 1, col = cols[c(7, 8, 9, 10)], lwd = 2)
par(mfrow = c(1, 1),
bg = NA)
dev.off()
cols <- c("#999999", #1
"#E69F00", #2
"#56B4E9", #3
"#009E73", #4
"#F0E442", #5
"#0072B2", #6
"#D55E00", #7
"#CC79A7", #8
"#271DEB", #9
"black")   #10
png(filename = "Real Data Predictions.png", width = 9, height = 6,
units = "in", res = 300)
i <- 14
par(mfrow = c(1, 2),
bg = NA)
plot(qnorm(seq(.1, .9, by = .1)), quant_1pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Individual Model Predictions", bty = 'l', lwd = 2, col = cols[1])
lines(qnorm(seq(.1, .9, by = .1)), quant_2pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[2])
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[3])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[4])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL2_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[6])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("1PL", "2PL", "CLL", "NLL", "2NLL"),
col = cols[c(1, 2, 3, 4, 6)], lty = 1, bty = "n", lwd = 2)
plot(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Averaged Predictions", bty = 'l', lwd = 2, col = cols[7])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[8])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[9])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[10])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("Item-Level Average, BMA+", "Item-Level Average, Stacking",
"Test-Level Average, BMA+", "Test-Level Average, Stacking"),
bty = "n", lty = 1, col = cols[c(7, 8, 9, 10)], lwd = 2)
par(mfrow = c(1, 1),
bg = NA)
dev.off()
png(filename = "Real Data Predictions.png", width = 9, height = 6,
units = "in", res = 300)
i <- 14
par(mfrow = c(1, 2),
bg = NA,
family = "Times New Roman")
plot(qnorm(seq(.1, .9, by = .1)), quant_1pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Individual Model Predictions", bty = 'l', lwd = 2, col = cols[1])
lines(qnorm(seq(.1, .9, by = .1)), quant_2pl_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[2])
lines(qnorm(seq(.1, .9, by = .1)), quant_CLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[3])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL1_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[4])
lines(qnorm(seq(.1, .9, by = .1)), quant_NLL2_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[6])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("1PL", "2PL", "CLL", "NLL", "2NLL"),
col = cols[c(1, 2, 3, 4, 6)], lty = 1, bty = "n", lwd = 2)
plot(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], type = 'l',
ylim = c(-.2, .2), xlab = expression(theta), ylab = "Probability Difference from CLL2",
main = "Averaged Predictions", bty = 'l', lwd = 2, col = cols[7])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_item_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[8])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_bma_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[9])
lines(qnorm(seq(.1, .9, by = .1)), prob_averaged_mod_stack_theo_mean[i, ] - quant_CLL2_theo_mean[i, ], lwd = 2, col = cols[10])
abline(h = 0, lty = 3, lwd = 1.5)
legend("bottomright", legend = c("Item-Level Average, BMA+", "Item-Level Average, Stacking",
"Test-Level Average, BMA+", "Test-Level Average, Stacking"),
bty = "n", lty = 1, col = cols[c(7, 8, 9, 10)], lwd = 2)
par(mfrow = c(1, 1),
bg = NA)
dev.off()
cols <- c("#999999", #1
"#E69F00", #2
"#56B4E9", #3
"#009E73", #4
"#F0E442", #5
"#0072B2", #6
"#D55E00", #7
"#CC79A7", #8
"#271DEB", #9
"black")   #10
