coef_summary$mean,
coef_summary$se,
coef_summary$CI_2.5,
coef_summary$CI_97.5)
summary_tab <- data.frame(coef_summary["race"],
coef_summary[c("outcome")],
coef_summary[c("coef_type")],
coef_summary[c("Predictor")],
coef_summary[c("mean")],
coef_summary[c("se")],
coef_summary[c("CI_2.5")],
coef_summary[c("CI_97.5")])
summary_tab <- data.frame(coef_summary["race"],
coef_summary["outcome"],
coef_summary["coef_type"],
coef_summary["Predictor"],
coef_summary["mean"],
coef_summary["se"],
coef_summary["CI_2.5"],
coef_summary["CI_97.5"])
library(tidyverse, quietly = TRUE)
theme_set(theme_classic())
# load results and data (if needed)
results <- readRDS("mod_list_unpooled.RDS")
dat <- read.csv("dat_GPA_clean.csv")
# get MCMC draws and create data.frame
res_draws <- data.frame(rbind(data.frame(results$White),
data.frame(results$Asian),
data.frame(results$Black),
data.frame(results$Hispanic)))
# calculate indirect effects for first gen and continuing
res_draws[c("ind_eff_comp_stress_continuing")] <- res_draws$b_stress_compet*res_draws$b_GPAcat_stress
res_draws[c("ind_eff_comp_achieve_continuing")] <- res_draws$b_achieve_compet*res_draws$b_GPAcat_achieve
res_draws[c("ind_eff_comp_stress_firstgen")] <- (res_draws$b_stress_compet + res_draws$b_stress_compet.first_gen_bin)*(res_draws$b_GPAcat_stress + res_draws$b_GPAcat_stress.first_gen_bin)
res_draws[c("ind_eff_comp_achieve_firstgen")] <- (res_draws$b_achieve_compet + res_draws$b_achieve_compet.first_gen_bin)*(res_draws$b_GPAcat_achieve + res_draws$b_GPAcat_first_gen_bin.achieve)
# add race to identify which draws are from which mode
res_draws[c("race")] <- c(rep("White", nrow(res_draws)/4),
rep("Asian", nrow(res_draws)/4),
rep("Black", nrow(res_draws)/4),
rep("Hispanic", nrow(res_draws)/4))
# summarize coefficients by race
res_draws_long <- res_draws %>%
pivot_longer(cols = colnames(res_draws[-ncol(res_draws)]),
values_to = "value",
names_to = "coef")
# disable scientific notation
options(scipen=999)
coef_summary <- res_draws_long %>%
group_by(race, coef) %>%
summarize(mean = mean(value),
se = sd(value),
median = quantile(value, c(.5)),
CI_2.5 = quantile(value, c(.025)),
CI_97.5 = quantile(value, c(.975))) %>%
# remove useless log prior and posterior columns
filter(coef != c("lprior")) %>%
filter(coef != c("lp__"))
# round values to make table more readable
coef_summary[, 3:ncol(coef_summary)] <- round(coef_summary[,3:ncol(coef_summary)], 3)
# create better labels for coefficients
coef_summary[c("coef_type")] <- ifelse(grepl("sigma", coef_summary$coef, fixed = TRUE), "residual",
ifelse(grepl("Intercept", coef_summary$coef, fixed = TRUE), "Intercept",
ifelse(grepl("ind_eff_", coef_summary$coef, fixed = TRUE), "indirect_effect",
ifelse(grepl(".", coef_summary$coef, fixed = TRUE), "iteraction", "slope"))))
# outcome variable
coef_summary <- coef_summary %>%
mutate(Outcome = case_when(coef %in% coef_summary$coef[which(grepl("b_GPAcat", coef_summary$coef, fixed = TRUE))] ~  "GPA",
coef %in% coef_summary$coef[which(grepl("ind_eff", coef_summary$coef, fixed = TRUE))] ~  "Mediation",
coef %in% coef_summary$coef[which(grepl("b_achieve", coef_summary$coef, fixed = TRUE))] ~  "Achievement",
coef %in% coef_summary$coef[which(grepl("b_stress", coef_summary$coef, fixed = TRUE))] ~  "Stress",
TRUE ~'Other'))
# clean Coef variable
coef_summary <- coef_summary %>%
mutate(Predictor = case_when(coef %in% coef_summary$coef[which(grepl("b_GPAcat", coef_summary$coef, fixed = TRUE))] ~ gsub("foo","",) ,
coef %in% coef_summary$coef[which(grepl("ind_eff", coef_summary$coef, fixed = TRUE))] ~  "Mediation",
coef %in% coef_summary$coef[which(grepl("b_achieve", coef_summary$coef, fixed = TRUE))] ~  "Achievement",
coef %in% coef_summary$coef[which(grepl("b_stress", coef_summary$coef, fixed = TRUE))] ~  "Stress",
TRUE ~'Other'))
library(stringi)
# create predictor column and fix labels
coef_summary[c("Predictor")] <- stri_replace_all_regex(coef_summary$coef,
pattern = c("b_GPAcat_", "b_achieve_", "b_stress_",
"first_gen_bin", "achieve", "compet"),
replacement = c("","", "",
"first_gen", "achievement", "competitiveness"),
vectorize = FALSE)
summary_tab <- data.frame(coef_summary["race"],
coef_summary["outcome"],
coef_summary["coef_type"],
coef_summary["Predictor"],
coef_summary["mean"],
coef_summary["se"],
coef_summary["CI_2.5"],
coef_summary["CI_97.5"])
summary_tab <- data.frame(coef_summary["race"],
coef_summary["Outcome"],
coef_summary["coef_type"],
coef_summary["Predictor"],
coef_summary["mean"],
coef_summary["se"],
coef_summary["CI_2.5"],
coef_summary["CI_97.5"])
View(summary_tab)
write.csv(summary_tab, "Model_summaries.csv")
write.csv(summary_tab,
"Model_summaries.csv",
row.names = FALSE)
set.seed(12344)
theta <- rnorm(1000)
I <- 20
pars <- cbind(rgamma(I, 16, 12),
rnorm(I))
dat <- genPattern_NLL(th = theta, pars = pars, seed = 4567)
library(mirt)
library(usefun)
set.seed(12344)
theta <- rnorm(1000)
I <- 20
pars <- cbind(rgamma(I, 16, 12),
rnorm(I))
dat <- genPattern_NLL(th = theta, pars = pars, seed = 4567)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "4PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
cor(theta_2pl,
theta_3pl)
cor(theta_2pl,
theta_3pl,
method = "spearman")
fit_2pl <- mirt(dat,
itemtype = "1PL")
fit_2pl <- mirt(dat,
itemtype = "Rasch")
fit_3pl <- mirt(dat,
itemtype = "4PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
cor(theta_2pl,
theta_3pl)
plot(theta_2pl, theta_3pl)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "4PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
set.seed(12344)
theta <- rnorm(1000)
I <- 20
pars <- cbind(rgamma(I, 16, 12),
rnorm(I))
dat <- genPattern_CLL(th = theta, pars = pars, seed = 4567)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL")
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
fit_3pl <- mirt(dat,
itemtype = "3PL",
technical = list(NCYCLES = 2000))
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL",
technical = list(NCYCLES = 5000))
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
rank <- data.frame("Rank_2pl" = rank(theta_2pl),
"Rank_3pl" = rank(theta_3pl)))
rank <- data.frame("Rank_2pl" = rank(theta_2pl),
"Rank_3pl" = rank(theta_3pl))
View(rank)
View(theta_2pl)
View(theta_3pl)
fit_2pl <- mirt(dat,
itemtype = "Rasc")
fit_2pl <- mirt(dat,
itemtype = "Rasch")
fit_3pl <- mirt(dat,
itemtype = "2PL",
technical = list(NCYCLES = 5000))
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
rank <- data.frame("Rank_2pl" = rank(theta_2pl),
"Rank_3pl" = rank(theta_3pl))
View(rank)
set.seed(12344)
theta <- rnorm(1000)
I <- 20
pars <- cbind(rgamma(I, 16, 12),
rnorm(I))
dat <- genPattern_NLL(th = theta, pars = pars, seed = 4567)
fit_2pl <- mirt(dat,
itemtype = "Rasch")
fit_3pl <- mirt(dat,
itemtype = "2PL",
technical = list(NCYCLES = 5000))
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
pars <- cbind(rgamma(I, 16, 12),
rnorm(I),
rep(0, I),
rep(1, I))
dat <- genPattern_4PL(th = theta, pars = pars, seed = 4567)
fit_2pl <- mirt(dat,
itemtype = "Rasch")
fit_3pl <- mirt(dat,
itemtype = "2PL",
technical = list(NCYCLES = 5000))
theta_2pl <- fscores(fit_2pl)
theta_3pl <- fscores(fit_3pl)
plot(theta_2pl,
theta_3pl)
cor(theta_2pl,
theta_3pl,
method = "spearman")
rank <- data.frame("Rank_2pl" = rank(theta_2pl),
"Rank_3pl" = rank(theta_3pl))
View(rank)
rank <- data.frame("Rank_2pl" = rank(theta_2pl,
ties.method = c("last")),
"Rank_3pl" = rank(theta_3pl))
rank <- data.frame("Rank_2pl" = rank(theta_2pl,
ties.method = c("last")),
"Rank_3pl" = rank(theta_3pl,
ties.method = c("last")))
View(rank)
setwd("C:/Users/fabio/OneDrive - Fordham University/Desktop/Work/Papers/Model averaging/IMPS presentation/images")
plot(theta_2pl,
theta_3pl)
library(mirt)
library(tidyverse)
library(usefun)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL",
technical = list(NCYCLES = 5000))
dat <- data.frame(theta_2pl = fscores(fit_2pl),
theta_3pl = fscores(fit_3pl))
plot(theta_2pl,
theta_3pl)
set.seed(12344)
theta <- rnorm(1000)
I <- 20
pars <- cbind(rgamma(I, 16, 12),
rnorm(I),
rep(0, I),
rep(1, I))
dat <- genPattern_4PL(th = theta, pars = pars, seed = 4567)
fit_2pl <- mirt(dat,
itemtype = "2PL")
fit_3pl <- mirt(dat,
itemtype = "3PL",
technical = list(NCYCLES = 5000))
dat <- data.frame(theta_2pl = fscores(fit_2pl),
theta_3pl = fscores(fit_3pl))
plot(theta_2pl,
theta_3pl)
setwd("C:/Users/fabio/OneDrive - Fordham University/Desktop/Work/Papers/Model averaging/IMPS presentation/images")
library(extrafont)
# load font
loadfonts(device="win")
par(family = "Times New Roman")
theta_plot <- gglpot(dat, ees(x = theta_2pl, y = theta_3pl))+
geom_point(
theta_plot <- gglpot(dat, ees(x = theta_2pl, y = theta_3pl))+
geom_point()
theta_plot <- gglpot(dat, ees(x = theta_2pl, y = theta_3pl))+
theta_plot <- gglpot(dat, ees(x = theta_2pl, y = theta_3pl))+
geom_point()
theta_plot <- ggplot(dat, ees(x = theta_2pl, y = theta_3pl))+
geom_point()
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl))+
geom_point()
print(theta_plot)
theme_set(theme_classic())
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point()
print(theta_plot)
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point() +
theme(panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
legend.background = element_rect(fill='transparent'),
legend.position=c(.8,.25))
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point() +
theme(panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
legend.background = element_rect(fill='transparent'),
legend.position=c(.8,.25))
print(theta_plot)
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point() +
theme(text = element_text(family = "Times New Roman",
size = 14)) +
theme(panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
legend.background = element_rect(fill='transparent'),
legend.position=c(.8,.25))
print(theta_plot)
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point() +
theme(text = element_text(family = "Times New Roman",
size = 14)) +
labs(x = "\u03b8 2PL",
y = "\u03b8 3PL") +
theme(panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
legend.background = element_rect(fill='transparent'),
legend.position=c(.8,.25))
print(theta_plot)
theta_plot <- ggplot(dat, aes(x = theta_2pl, y = theta_3pl)) +
geom_point() +
theme(text = element_text(family = "Times New Roman",
size = 14)) +
labs(x = "\u03b8 2PL",
y = "\u03b8 3PL") +
theme(panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
legend.background = element_rect(fill='transparent'),
legend.position=c(.8,.25))
print(theta_plot)
ggsave("theta_plot.png",
theta_plot,
width = 7, height = 4.5, dpi = 300, units = "in")
library(tidyverse,
quietly = TRUE)
library(extrafont)
# load fontd
loadfonts(device="win")
irf_CLL <- function(theta, a = 1, b = 0)
{
1 - exp( -exp( a*(theta - b)))
}
irf_NLL <- function(theta, a = 1, b = .5)
{
exp( -exp( -a*(theta - b)))
}
irf_stukel <- function (theta, a = 1, b = 0, alpha1 = .75, alpha2 = .75)
{
# Using the fact that TRUE and FALSE are 1 and 0 respectively to vectorize pice-wise function
h <- ((theta - b) > 0)*
(((alpha1 > 0) * alpha1^(-1) * (exp(alpha1 * a * (theta - b)) - 1)) +
((alpha1 == 0) * a * (theta - b)) +
(alpha1 < 0) * -alpha1^(-1) * log(abs(1 - alpha1 * a * (theta - b)))) +
((theta - b) <= 0)*
(((alpha2 > 0) * -alpha2^(-1) * (exp(alpha2 * a * ((b - theta))) - 1)) +
((alpha2 == 0) * a * (theta - b)) +
(alpha2 < 0) * alpha2^(-1) * log(abs(1 - alpha2 * a * ((b - theta)))))
# Make sure that h does not become too large for R to handle
h <- ifelse(h > 601.7777, 601.7777, h)
h <- ifelse(h < -601.7777, -601.7777, h)
return(exp(h)/(1 + exp(h)))
}
x <- seq(-3, 3, by = .01)
avg_dat <- data.frame(theta = seq(-3, 3, by = .01),
NLL = irf_NLL(theta = x),
CLL = irf_CLL(theta = x))
avg_dat$AVG <- avg_dat$CLL*.7 + avg_dat$NLL*.3
cols <- c("#E41A1C", "#377EB8", "#4DAF4A", "blue")
png(file = "avg_plot.png",
width     = 3.75,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 7)
par(family = "Times New Roman",
bg = NA)
plot(x = avg_dat$theta,
y = avg_dat$NLL,
cex=1.5,
type="l",
lwd=1,
xlab=expression(theta),
ylab=expression(paste(P, "(", italic(y), " = 1 | ", theta, ")")),
cex.lab = 1.1,
xlim = c(-3, 3),
ylim = c(0,1.1),
col = cols[1],
lty=3,
pch=8,
bty="l")
lines(x = avg_dat$theta,
y = avg_dat$CLL,
col = cols[2],
lwd = 1.25,
lty=3)
lines(x = avg_dat$theta,
y = avg_dat$AVG,
col = cols[4],
lwd = 1,
lty=2)
polygon(c(avg_dat$theta, rev(avg_dat$theta)),
c(avg_dat$CLL, rev(avg_dat$AVG)),
col = cols[2],
lwd=.75,
border = NA,
density = 4,
lty = 3,
angle = 90)
polygon(c(avg_dat$theta, rev(avg_dat$theta)),
c(avg_dat$NLL, rev(avg_dat$AVG)),
col = cols[1],
border = NA,
lwd=.75,
density = 4,
lty = 3,
angle = 90)
legend("bottomright", bty = "n", col = cols[c(1,2,4)],
lty = c(3,3,5),
lwd=1.25,
cex = 1,
legend = as.expression(c(
bquote(NLL),
bquote(CLL),
bquote(Average))))
dev.off()
setwd("C:/Users/fabio/OneDrive - Fordham University/Desktop/Work/Papers/Model averaging/IMPS Submission")
setwd("C:/Users/fabio/OneDrive - Fordham University/Desktop/Work/Papers/Model averaging/IMPS presentation/images")
png(file = "avg_plot.png",
width     = 3.75,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 7)
par(family = "Times New Roman",
bg = NA)
plot(x = avg_dat$theta,
y = avg_dat$NLL,
cex=1.5,
type="l",
lwd=1,
xlab=expression(theta),
ylab=expression(paste(P, "(", italic(Y), " = 1 | ", theta, ")")),
cex.lab = 1.1,
xlim = c(-3, 3),
ylim = c(0,1.1),
col = cols[1],
lty=3,
pch=8,
bty="l")
lines(x = avg_dat$theta,
y = avg_dat$CLL,
col = cols[2],
lwd = 1.25,
lty=3)
lines(x = avg_dat$theta,
y = avg_dat$AVG,
col = cols[4],
lwd = 1,
lty=2)
polygon(c(avg_dat$theta, rev(avg_dat$theta)),
c(avg_dat$CLL, rev(avg_dat$AVG)),
col = cols[2],
lwd=.75,
border = NA,
density = 4,
lty = 3,
angle = 90)
polygon(c(avg_dat$theta, rev(avg_dat$theta)),
c(avg_dat$NLL, rev(avg_dat$AVG)),
col = cols[1],
border = NA,
lwd=.75,
density = 4,
lty = 3,
angle = 90)
legend("bottomright", bty = "n", col = cols[c(1,2,4)],
lty = c(3,3,5),
lwd=1.25,
cex = 1,
legend = as.expression(c(
bquote(NLL),
bquote(CLL),
bquote(Average))))
dev.off()
